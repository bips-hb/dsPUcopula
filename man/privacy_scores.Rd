% Generated by hand from R/server_funs.R
\name{py_syndat_scores}
\alias{py_syndat_scores}
\alias{py_anonymeter_SinglingOut}
\alias{py_anonymeter_Inference}
\title{Python-backed privacy and utility scoring helpers}
\description{
Bridge functions that call the Python packages \strong{syndat} and
\strong{anonymeter} to evaluate utility and disclosure risks for synthetic
DataSHIELD exports.
}
\usage{
py_syndat_scores(ori, syn, control = NULL)

py_anonymeter_SinglingOut(ori, syn, control = NULL, return_evaluator = FALSE)

py_anonymeter_Inference(ori, syn, aux_cols, secret,
  inference_check_ignore_na = FALSE, control = NULL,
  return_evaluator = FALSE)
}
\arguments{
  \item{ori}{Data set used to train the synthesiser.}
  \item{syn}{Synthetic data set to be evaluated.}
  \item{control}{Optional hold-out data set used as a reference distribution.}
  \item{return_evaluator}{Logical; when \code{TRUE} the underlying Python
  evaluator object is returned.}
  \item{aux_cols}{Character vector naming the auxiliary columns used in the
  inference attack.}
  \item{secret}{Character scalar naming the sensitive attribute.}
  \item{inference_check_ignore_na}{Logical; remove records with missing secrets
  before running the inference attack.}
}
\value{
  \code{py_syndat_scores()} returns a named list of quality metrics.
  The Anonymeter helpers return either the evaluator object or a list of risk
  summaries depending on \code{return_evaluator}.
}
